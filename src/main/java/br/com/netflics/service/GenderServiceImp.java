/* generated by JSetup v0.95 :  at 1 de fev de 2023 23:43:21 */
package br.com.netflics.service;

import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import br.com.netflics.core.model.Tenant ;

import br.com.netflics.model.Gender;
import br.com.netflics.persistence.GenderRepository;
import br.com.netflics.persistence.GenderSpecificationHelper;
import br.com.netflics.model.filter.FilterGender;

import br.com.netflics.core.persistence.pagination.Pager;
import br.com.netflics.core.rs.exception.ValidationException;
import br.com.netflics.core.persistence.pagination.SearchParameters;
import br.com.netflics.core.utils.DateUtil;
import br.com.netflics.core.utils.Util;

@Service
@Transactional
public class GenderServiceImp implements GenderService {

	public static final Logger LOGGER = LoggerFactory.getLogger(GenderServiceImp.class);
	
	@Autowired
	GenderRepository genderRepository;
	
	public Optional<Gender> get(Integer id, Tenant tenant) {
		return genderRepository.findOne(GenderSpecificationHelper.fromId(id, tenant));
	}

	public Pager<Gender> get(SearchParameters<FilterGender> searchParams, Tenant tenant) {
		Pageable pageRequest = searchParams.getPageRequest();

		Page<Gender> page = genderRepository.findAll(GenderSpecificationHelper.filter(searchParams, tenant), pageRequest);

		return new Pager<Gender>(page.getContent(), searchParams.getPage(), searchParams.getPageSize(),
		        searchParams.getOrder(), searchParams.getOrderBy(), page.getTotalElements());
	}

	public Boolean delete(Integer id, Tenant tenant) {
		Optional<Gender> optional = this.get(id, tenant);
		if (optional.isPresent()) {
			genderRepository.delete(optional.get());
		}
		return true;
	}

	public Gender save(Gender entity) {
		return genderRepository.save(entity);
	}

	public Gender update(Gender entity) {
		return genderRepository.save(entity);
	}
}

//generated by JSetup v0.95 :  at 1 de fev de 2023 23:43:21