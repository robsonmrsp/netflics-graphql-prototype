/* generated by JSetup v0.95 :  at 1 de fev de 2023 23:43:21 */
package br.com.netflics.service;

import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import br.com.netflics.core.model.Tenant ;

import br.com.netflics.model.Person;
import br.com.netflics.persistence.PersonRepository;
import br.com.netflics.persistence.PersonSpecificationHelper;
import br.com.netflics.model.filter.FilterPerson;

import br.com.netflics.core.persistence.pagination.Pager;
import br.com.netflics.core.rs.exception.ValidationException;
import br.com.netflics.core.persistence.pagination.SearchParameters;
import br.com.netflics.core.utils.DateUtil;
import br.com.netflics.core.utils.Util;

@Service
@Transactional
public class PersonServiceImp implements PersonService {

	public static final Logger LOGGER = LoggerFactory.getLogger(PersonServiceImp.class);
	
	@Autowired
	PersonRepository personRepository;
	
	public Optional<Person> get(Integer id, Tenant tenant) {
		return personRepository.findOne(PersonSpecificationHelper.fromId(id, tenant));
	}

	public Pager<Person> get(SearchParameters<FilterPerson> searchParams, Tenant tenant) {
		Pageable pageRequest = searchParams.getPageRequest();

		Page<Person> page = personRepository.findAll(PersonSpecificationHelper.filter(searchParams, tenant), pageRequest);

		return new Pager<Person>(page.getContent(), searchParams.getPage(), searchParams.getPageSize(),
		        searchParams.getOrder(), searchParams.getOrderBy(), page.getTotalElements());
	}

	public Boolean delete(Integer id, Tenant tenant) {
		Optional<Person> optional = this.get(id, tenant);
		if (optional.isPresent()) {
			personRepository.delete(optional.get());
		}
		return true;
	}

	public Person save(Person entity) {
		return personRepository.save(entity);
	}

	public Person update(Person entity) {
		return personRepository.save(entity);
	}
}

//generated by JSetup v0.95 :  at 1 de fev de 2023 23:43:21