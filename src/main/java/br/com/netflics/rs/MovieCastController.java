/*  generated by JSetup v0.95 :  at 1 de fev de 2023 23:43:21 */
package br.com.netflics.rs;

import static org.springframework.http.HttpStatus.*;
import static org.springframework.http.MediaType.*;
import static org.springframework.web.bind.annotation.RequestMethod.*;

import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;

import br.com.netflics.core.json.JsonError;
import br.com.netflics.core.json.JsonPaginator;
import br.com.netflics.json.JsonMovieCast;

import br.com.netflics.model.MovieCast;

import br.com.netflics.service.MovieCastService;
import br.com.netflics.model.filter.FilterMovieCast;
import br.com.netflics.core.persistence.pagination.Pager;
import br.com.netflics.core.persistence.pagination.SearchParameters;
import br.com.netflics.core.rs.exception.ValidationException;
import br.com.netflics.core.security.SpringSecurityUserContext;

import br.com.netflics.utils.Parser;
@RestController
@RequestMapping("/rs/crud/movieCasts")
@SuppressWarnings({ "unchecked", "rawtypes" })
public class MovieCastController {
	@Autowired
	MovieCastService movieCastService;
	@Autowired
	private SpringSecurityUserContext context;
	public static final Logger LOGGER = LoggerFactory.getLogger(MovieCastController.class);

	@RequestMapping(method = GET, produces = APPLICATION_JSON_VALUE)
	public ResponseEntity get(@RequestParam MultiValueMap<String, String> mapParams) {
		ResponseEntity response = null;

		Pager<MovieCast> movieCasts = null;
		try {
			SearchParameters<FilterMovieCast> paginationParams = new SearchParameters<FilterMovieCast>(mapParams, FilterMovieCast.class);

			movieCasts = movieCastService.get(paginationParams, context.getTenant());
			
			JsonPaginator<JsonMovieCast> paginator = JsonPaginator.of(Parser.toListJsonMovieCasts(movieCasts.getItems()),
				 movieCasts.getActualPage(), movieCasts.getPageSize(), movieCasts.getOrder(), movieCasts.getOrderBy(),movieCasts.getTotalRecords());

			response = ResponseEntity.ok(paginator);

		} catch (Exception e) {
			String message = String.format("Não foi possivel carregar movieCasts para os parametros %s [%s]", mapParams.toString(), e.getMessage());
			LOGGER.error(message, e);
			response = ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new JsonError(e, message, null));
		}
		return response;
	}
	
	@RequestMapping(value = "{id:\\d+}", method = GET, produces = APPLICATION_JSON_VALUE)
	public ResponseEntity get(@PathVariable("id") int id) {
		try {
			Optional<MovieCast> optional = movieCastService.get(id, context.getTenant());
			
			if (optional.isPresent()) {
				return ResponseEntity.ok(Parser.toJson(optional.get()));
			}

			return ResponseEntity.notFound().build();

		} catch (Exception e) {
			String message = String.format("Não foi possivel carregar o registro. [ %s ] parametros [ %d ]", e.getMessage(), id);
			LOGGER.error(message, e);
			return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new JsonError(e, message, null));
		}
	}

	@RequestMapping(method = POST, produces = APPLICATION_JSON_VALUE)
	public ResponseEntity save(@RequestBody JsonMovieCast jsonMovieCast) {
		try {
			MovieCast movieCast = Parser.toEntity(jsonMovieCast);

			movieCast = movieCastService.save(movieCast);

			return ResponseEntity.status(CREATED).body(Parser.toJson(movieCast));

		} catch (ValidationException e) {
			String message = String.format("Não foi possivel salvar  o registro [ %s ] parametros [ %s ]", e.getOrigem().getMessage(), jsonMovieCast.toString());
			LOGGER.error(message, e.getOrigem());
			return ResponseEntity.status(BAD_REQUEST).body(new JsonError(e, message, jsonMovieCast, e.getLegalMessage()));
		} catch (Exception e) {
			String message = String.format("Não foi possivel salvar  movieCast [ %s ] parametros [ %s ]", e.getMessage(), jsonMovieCast.toString());
			LOGGER.error(message, e);
			return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new JsonError(e, message, jsonMovieCast));

		}
	}

	@RequestMapping(value = "{id:\\d+}", method = PUT, produces = APPLICATION_JSON_VALUE)
	public ResponseEntity update(@PathVariable("id") Integer id, @RequestBody JsonMovieCast jsonMovieCast) {
		try {
			MovieCast movieCast = Parser.toEntity(jsonMovieCast);

			movieCast = movieCastService.update(movieCast);

			return ResponseEntity.ok(Parser.toJson(movieCast));
		} catch (ValidationException e) {
			String message = String.format("Não foi possivel salvar  o registro [ %s ] parametros [ %s ]", e.getOrigem().getMessage(), jsonMovieCast.toString());
			LOGGER.error(message, e.getOrigem());
			return ResponseEntity.status(BAD_REQUEST).body(new JsonError(e, message, jsonMovieCast, e.getLegalMessage()));
		} catch (Exception e) {
			String message = String.format("Não foi possivel salvar o registro [ %s ] parametros [ %s ]", e.getMessage(), jsonMovieCast.toString());
			LOGGER.error(message, e);
			return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new JsonError(e, message, jsonMovieCast));
		}
	}
	
	@RequestMapping(value = "{id:\\d+}", method = DELETE)
	public ResponseEntity delete(@PathVariable("id") Integer id) {
		try {
			movieCastService.delete(id, context.getTenant());
			return ResponseEntity.noContent().build();
		} catch (Exception e) {
			String message = String.format("Não foi possivel remover o registro [ %s ] parametros [ %s ]", e.getMessage(), id);
			LOGGER.error(message, e);
			return ResponseEntity.status(INTERNAL_SERVER_ERROR).body(new JsonError(e, message, id));
		}
	}

}
//generated by JSetup v0.95 :  at 1 de fev de 2023 23:43:21
