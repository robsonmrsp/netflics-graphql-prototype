/* MovieÂ´s Form generated by JSetup v0.95 :  at 1 de fev de 2023 21:03:52 */  
import { useEffect, useState } from 'react';
import Head from 'next/head';
import dayjs from 'dayjs';
import Router from 'next/router';
import { TextField, CheckboxWithLabel } from 'formik-mui';
import { Formik, Form, Field } from 'formik';
import { DatePicker } from 'formik-mui-x-date-pickers';

import { Button, LinearProgress, Card, CardContent, CardHeader, Divider, Box, Stack } from '@mui/material';

import { Layout } from '@/components/layout/layout';
import HttpRequest from '@/lib/HttpRequest'
import { useRouter } from 'next/router'

const initValues = {
  revenue: '',	
  releaseDate: '',	
  popularity: '',	
  overview: '',	
  homepage: '',	
  budget: '',	
  title: '',	
  voteCount: '',	
  voteAverage: '',	
  tagline: '',	
  status: '',	
  runtime: '',	
}

const toMovie = (values) => {
  return { 
    ...values,
  }
}

const Movie = () => {
  const service = new HttpRequest("/rs/crud/movies");
  const router = useRouter()
  const [formValues, setFormValues] = useState(initValues);
  const { id } = router.query

  useEffect(() => {
    if (!id) return;
    const fetchData = async () => {
      try {
        const response = await service.getById(id);
        const json = await response.data;
        setFormValues(json)
      } catch (err) {
        console.error(err)
      }
    }
    fetchData().catch(console.error);
  }, []);

  const save = async (formValues) => {
    const response = await service.save(toMovie(formValues));
    const json = await response.data;
    console.log(json)
  }

  const formValidate = (values) => {
    const errors = {};
  /*
    if (!values.Movie) {errors.title = 'Invalid!';}	
    if (!values.Movie) {errors.title = 'Invalid!';}	
    if (!values.Movie) {errors.title = 'Invalid!';}	
    if (!values.Movie) {errors.title = 'Invalid!';}	
    if (!values.Movie) {errors.title = 'Invalid!';}	
    if (!values.Movie) {errors.title = 'Invalid!';}	
    if (!values.Movie) {errors.title = 'Invalid!';}	
    if (!values.Movie) {errors.title = 'Invalid!';}	
    if (!values.Movie) {errors.title = 'Invalid!';}	
    if (!values.Movie) {errors.title = 'Invalid!';}	
    if (!values.Movie) {errors.title = 'Invalid!';}	
    if (!values.Movie) {errors.title = 'Invalid!';}	
  */
    return errors;
  }

  return <>
    <Head>
      <title>
        Cadastro de Movie
      </title>
    </Head>
    <Card>
      <CardHeader
        title="Novo Movie"
      />

      <Divider />
      <CardContent>
        <Formik
          enableReinitialize={true}	
          initialValues={formValues}
          validate={formValidate}
          
          onSubmit={(values, { setSubmitting }) => {
          	save(values);
          	setSubmitting(false);
          }}
        >
          {({ submitForm, isSubmitting }) => (
            <Form>
              <Box marginTop={2}>
                <Field
                  component={TextField}
                  name="revenue"
                  type="text"
                  label="Revenue"
                  variant="outlined"
                  fullWidth
                />
              </Box>	
              <Box marginTop={2}>
                <Field
                  component={TextField}
                  name="releaseDate"
                  type="text"
                  label="ReleaseDate"
                  variant="outlined"
                  fullWidth
                />
              </Box>	
              <Box marginTop={2}>
                <Field
                  component={TextField}
                  name="popularity"
                  type="text"
                  label="Popularity"
                  variant="outlined"
                  fullWidth
                />
              </Box>	
              <Box marginTop={2}>
                <Field
                  component={TextField}
                  name="overview"
                  type="text"
                  label="Overview"
                  variant="outlined"
                  fullWidth
                />
              </Box>	
              <Box marginTop={2}>
                <Field
                  component={TextField}
                  name="homepage"
                  type="text"
                  label="Homepage"
                  variant="outlined"
                  fullWidth
                />
              </Box>	
              <Box marginTop={2}>
                <Field
                  component={TextField}
                  name="budget"
                  type="text"
                  label="Budget"
                  variant="outlined"
                  fullWidth
                />
              </Box>	
              <Box marginTop={2}>
                <Field
                  component={TextField}
                  name="title"
                  type="text"
                  label="Title"
                  variant="outlined"
                  fullWidth
                />
              </Box>	
              <Box marginTop={2}>
                <Field
                  component={TextField}
                  name="voteCount"
                  type="text"
                  label="VoteCount"
                  variant="outlined"
                  fullWidth
                />
              </Box>	
              <Box marginTop={2}>
                <Field
                  component={TextField}
                  name="voteAverage"
                  type="text"
                  label="VoteAverage"
                  variant="outlined"
                  fullWidth
                />
              </Box>	
              <Box marginTop={2}>
                <Field
                  component={TextField}
                  name="tagline"
                  type="text"
                  label="Tagline"
                  variant="outlined"
                  fullWidth
                />
              </Box>	
              <Box marginTop={2}>
                <Field
                  component={TextField}
                  name="status"
                  type="text"
                  label="Status"
                  variant="outlined"
                  fullWidth
                />
              </Box>	
              <Box marginTop={2}>
                <Field
                  component={TextField}
                  name="runtime"
                  type="text"
                  label="Runtime"
                  variant="outlined"
                  fullWidth
                />
              </Box>	
              {isSubmitting && <LinearProgress />}
              <Divider />
              <Box marginTop={2}>
                <Stack direction="row" spacing={2}>
                  <Button
                    variant="contained"
                    color="primary"
                    disabled={isSubmitting}
                    onClick={submitForm}
                  >
                    Salvar
                  </Button>
                  <Button
                    variant="text"
                    color="secondary"
                    disabled={isSubmitting}
                    onClick={() => Router.push('/movie/list').catch(console.error)}
                  >
                    Ver listagem
                  </Button>
                </Stack>
              </Box>
            </Form>
          )}
        </Formik>
      </CardContent>
      <Divider />
    </Card>
  </>
};

Movie.getLayout = (movie) => (
  <Layout>
    {movie}
  </Layout>
);

export default Movie;